"use client";
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useGLTF } from "@react-three/drei";
import { useRef, useState } from "react";
import { useFrame } from "@react-three/fiber";
import { Center, OrbitControls } from "@react-three/drei";

export default function JPText(props) {
  const { nodes, materials } = useGLTF("/jp.glb");
  const modelRef = useRef(null);

  const initialRotation = { x: 0, y: 0, z: 0 };
  const [rotation, setRotation] = useState(initialRotation);

  // Update rotation based on mouse position
  const handleMouseMove = (event) => {
    const { clientX, clientY } = event;
    console.log(clientX);
    const { top, left, width, height } = event.target.getBoundingClientRect();

    const x = ((clientX - left) / width) * 2 - 1;
    const y = -((clientY - top) / height) * 2 + 1;

    const rotationScale = 0.4; // Adjust this value to control rotation speed

    setRotation({
      x: y * rotationScale,
      y: x * rotationScale,
      z: 0,
    });
  };

  // Revert rotation to initial state on mouse leave
  const handleMouseLeave = () => {
    setRotation(initialRotation);
  };

  useFrame(() => {
    modelRef.current.rotation.set(rotation.x, rotation.y, rotation.z);
  });

  return (
    <group {...props} dispose={null}>
      <group scale={0.01}>
        <Center>
          <mesh
            ref={modelRef}
            castShadow
            receiveShadow
            scale={2.25}
            geometry={nodes.Text.geometry}
            material={materials["Material.002"]}
            position={[0, 0, 0]}
            onMouseMove={handleMouseMove}
            onMouseLeave={handleMouseLeave}
          />
        </Center>
      </group>
    </group>
  );
}

useGLTF.preload("/jp.glb");
